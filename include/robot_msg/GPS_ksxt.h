// Generated by gencpp from file gps_ksxt_msg/GPS_ksxt.msg
// DO NOT EDIT!


#ifndef GPS_KSXT_MSG_MESSAGE_GPS_KSXT_H
#define GPS_KSXT_MSG_MESSAGE_GPS_KSXT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gps_ksxt_msg
{
template <class ContainerAllocator>
struct GPS_ksxt_
{
  typedef GPS_ksxt_<ContainerAllocator> Type;

  GPS_ksxt_()
    : header()
    , utc(0.0)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , heading(0.0)
    , pitch(0.0)
    , tracktrue(0.0)
    , vel(0.0)
    , roll(0.0)
    , posqual(0)
    , headingqual(0)
    , east(0.0)
    , north(0.0)
    , up(0.0)
    , eastvel(0.0)
    , northvel(0.0)
    , upvel(0.0)  {
    }
  GPS_ksxt_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utc(0.0)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , heading(0.0)
    , pitch(0.0)
    , tracktrue(0.0)
    , vel(0.0)
    , roll(0.0)
    , posqual(0)
    , headingqual(0)
    , east(0.0)
    , north(0.0)
    , up(0.0)
    , eastvel(0.0)
    , northvel(0.0)
    , upvel(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _utc_type;
  _utc_type utc;

   typedef float _lon_type;
  _lon_type lon;

   typedef float _lat_type;
  _lat_type lat;

   typedef float _height_type;
  _height_type height;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _tracktrue_type;
  _tracktrue_type tracktrue;

   typedef float _vel_type;
  _vel_type vel;

   typedef float _roll_type;
  _roll_type roll;

   typedef int8_t _posqual_type;
  _posqual_type posqual;

   typedef int8_t _headingqual_type;
  _headingqual_type headingqual;

   typedef float _east_type;
  _east_type east;

   typedef float _north_type;
  _north_type north;

   typedef float _up_type;
  _up_type up;

   typedef float _eastvel_type;
  _eastvel_type eastvel;

   typedef float _northvel_type;
  _northvel_type northvel;

   typedef float _upvel_type;
  _upvel_type upvel;





  typedef boost::shared_ptr< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_ksxt_

typedef ::gps_ksxt_msg::GPS_ksxt_<std::allocator<void> > GPS_ksxt;

typedef boost::shared_ptr< ::gps_ksxt_msg::GPS_ksxt > GPS_ksxtPtr;
typedef boost::shared_ptr< ::gps_ksxt_msg::GPS_ksxt const> GPS_ksxtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator1> & lhs, const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utc == rhs.utc &&
    lhs.lon == rhs.lon &&
    lhs.lat == rhs.lat &&
    lhs.height == rhs.height &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.tracktrue == rhs.tracktrue &&
    lhs.vel == rhs.vel &&
    lhs.roll == rhs.roll &&
    lhs.posqual == rhs.posqual &&
    lhs.headingqual == rhs.headingqual &&
    lhs.east == rhs.east &&
    lhs.north == rhs.north &&
    lhs.up == rhs.up &&
    lhs.eastvel == rhs.eastvel &&
    lhs.northvel == rhs.northvel &&
    lhs.upvel == rhs.upvel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator1> & lhs, const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gps_ksxt_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b61a34f568b9a45352ff3f695aedd6b";
  }

  static const char* value(const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b61a34f568b9a45ULL;
  static const uint64_t static_value2 = 0x352ff3f695aedd6bULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_ksxt_msg/GPS_ksxt";
  }

  static const char* value(const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 utc	# UTC 时间\n"
"float32 lon	# 经度°\n"
"float32 lat	# 维度°\n"
"float32 height	# 海拔高度 m\n"
"float32 heading	# 方向角\n"
"float32 pitch	# 俯仰角\n"
"float32 tracktrue	# 速度角\n"
"float32 vel	# 水平速度\n"
"float32 roll	# 横滚\n"
"int8 posqual	# 单位质量 0 = 定位不可用或无效 1 = 单点定位 2 = RTK 浮点解 3 = RTK 固定解\n"
"int8 headingqual	# \n"
"float32 east	# 东向位置坐标 m\n"
"float32 north 	# 北向位置坐标 m\n"
"float32 up	# 天向位置坐标 m\n"
"float32 eastvel	# 东向速度 m/s\n"
"float32 northvel	# 北向速度 m/s\n"
"float32 upvel		# 天向速度\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utc);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.height);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.tracktrue);
      stream.next(m.vel);
      stream.next(m.roll);
      stream.next(m.posqual);
      stream.next(m.headingqual);
      stream.next(m.east);
      stream.next(m.north);
      stream.next(m.up);
      stream.next(m.eastvel);
      stream.next(m.northvel);
      stream.next(m.upvel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPS_ksxt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_ksxt_msg::GPS_ksxt_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utc: ";
    Printer<float>::stream(s, indent + "  ", v.utc);
    s << indent << "lon: ";
    Printer<float>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "tracktrue: ";
    Printer<float>::stream(s, indent + "  ", v.tracktrue);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "posqual: ";
    Printer<int8_t>::stream(s, indent + "  ", v.posqual);
    s << indent << "headingqual: ";
    Printer<int8_t>::stream(s, indent + "  ", v.headingqual);
    s << indent << "east: ";
    Printer<float>::stream(s, indent + "  ", v.east);
    s << indent << "north: ";
    Printer<float>::stream(s, indent + "  ", v.north);
    s << indent << "up: ";
    Printer<float>::stream(s, indent + "  ", v.up);
    s << indent << "eastvel: ";
    Printer<float>::stream(s, indent + "  ", v.eastvel);
    s << indent << "northvel: ";
    Printer<float>::stream(s, indent + "  ", v.northvel);
    s << indent << "upvel: ";
    Printer<float>::stream(s, indent + "  ", v.upvel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_KSXT_MSG_MESSAGE_GPS_KSXT_H
